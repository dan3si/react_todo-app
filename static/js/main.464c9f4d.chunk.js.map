{"version":3,"sources":["components/Todo/Todo.js","App.js","index.js"],"names":["Todo","todo","allTodos","todosSetter","className","completed","type","id","checked","onChange","updatedTodos","map","elem","current","htmlFor","title","onClick","filter","App","visibleTodos","useState","todosCounter","setTodosCounter","filterChosen","setFilter","addTodo","event","input","target","value","placeholder","onKeyUp","key","onBlur","every","statevalue","some","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.464c9f4d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, allTodos, todosSetter }) => (\n  <li className={todo.completed ? 'completed' : null}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={`todo-${todo.id}`}\n        checked={todo.completed}\n        onChange={() => {\n          const updatedTodos = allTodos.map((elem) => {\n            const current = elem;\n\n            if (current.id === todo.id) {\n              current.completed = !current.completed;\n            }\n\n            return current;\n          });\n\n          todosSetter(updatedTodos);\n        }}\n      />\n\n      <label htmlFor={`todo-${todo.id}`}>{todo.title}</label>\n\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => {\n          const updatedTodos = allTodos\n            .filter(current => current.id !== todo.id);\n\n          todosSetter(updatedTodos);\n        }}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  allTodos: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  todosSetter: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Todo } from './components/Todo/Todo';\n\nconst App = () => {\n  const [todosCounter, setTodosCounter] = useState(1);\n  const [allTodos, todosSetter] = useState([]);\n  const [filterChosen, setFilter] = useState('All');\n\n  let visibleTodos;\n\n  if (filterChosen === 'All') {\n    visibleTodos = allTodos.filter(() => true);\n  } else if (filterChosen === 'Completed') {\n    visibleTodos = allTodos.filter(current => current.completed);\n  } else if (filterChosen === 'Active') {\n    visibleTodos = allTodos.filter(current => !current.completed);\n  }\n\n  const addTodo = (event) => {\n    const input = event.target;\n\n    if (!input.value) {\n      return;\n    }\n\n    todosSetter([...allTodos, {\n      title: input.value,\n      completed: false,\n      id: todosCounter,\n    }]);\n\n    setTodosCounter(todosCounter + 1);\n    input.value = '';\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onKeyUp={(event) => {\n            if (event.key === 'Enter') {\n              addTodo(event);\n            }\n          }}\n          onBlur={addTodo}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allTodos.every(todo => todo.completed)}\n          onChange={() => {\n            const statevalue = allTodos.some(current => !current.completed);\n\n            todosSetter(\n              allTodos.map((current) => {\n                const todo = current;\n\n                todo.completed = statevalue;\n\n                return todo;\n              }),\n            );\n          }}\n        />\n\n        {allTodos.length > 0\n        && <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        }\n\n        <ul className=\"todo-list\">\n          {visibleTodos.map(todo => (\n            <Todo\n              key={todo.id}\n              todo={todo}\n              allTodos={allTodos}\n              todosSetter={todosSetter}\n            />\n          ))}\n        </ul>\n      </section>\n\n      {allTodos.length > 0\n      && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${allTodos.length} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <button\n                type=\"button\"\n                className={filterChosen === 'All' ? 'selected' : null}\n                onClick={() => setFilter('All')}\n              >\n                All\n              </button>\n            </li>\n\n            <li>\n              <button\n                type=\"button\"\n                className={filterChosen === 'Active' ? 'selected' : null}\n                onClick={() => setFilter('Active')}\n              >\n                Active\n              </button>\n            </li>\n\n            <li>\n              <button\n                type=\"button\"\n                className={filterChosen === 'Completed' ? 'selected' : null}\n                onClick={() => setFilter('Completed')}\n              >\n                Completed\n              </button>\n            </li>\n          </ul>\n\n          {allTodos.some(todo => todo.completed)\n          && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                todosSetter(\n                  allTodos.filter(todo => !todo.completed),\n                );\n              }}\n            >\n              Clear completed\n            </button>\n          )\n          }\n        </footer>\n      )\n      }\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}